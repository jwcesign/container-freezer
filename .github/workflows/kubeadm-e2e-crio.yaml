name: kubeadm e2e tests
on:
  pull_request:
    branches: [ 'main' ]
  push:
    branches: [ 'main' ]

defaults:
  run:
    shell: bash
    working-directory: ./src/knative.dev/container-freezer

env:
  GOTESTSUM_VERSION: 1.7.0
  CRIO_VERSION: 1.24.1

jobs:
  e2e-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
          - 1.22.9
          - 1.23.6
          - 1.24.2

    env:
      GOPATH: ${{ github.workspace }}
      KO_DOCKER_REPO: ko.local
      # It's a roundabout solution to work with ko
      # https://github.com/google/go-containerregistry/issues/998#issuecomment-899639215
      DOCKER_HOST: unix:///run/podman/podman.sock
      RUNTIME_TYPE: crio
      # Use a semi-random cluster suffix, but somewhat predictable
      # so reruns don't just give us a completely new value.
      CLUSTER_SUFFIX: c${{ github.run_id }}.local

    steps:
      - name: Set up Go 1.17.9
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.9

      - name: Install Dependencies
        working-directory: ./
        run: |
          echo '::group:: install ko'
          curl -L https://github.com/google/ko/releases/download/v0.9.3/ko_0.9.3_Linux_x86_64.tar.gz | tar xzf - ko
          chmod +x ./ko
          sudo mv ko /usr/local/bin
          echo '::endgroup::'

          echo '::group:: add repo'
          sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
          echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          echo '::endgroup::'

          echo '::group:: install kubeadm,kubectl,kubelet'
          sudo apt-get install -y kubeadm=${{ matrix.k8s-version }}-00 --allow-downgrades
          sudo apt-get install -y kubelet=${{ matrix.k8s-version }}-00 --allow-downgrades
          sudo apt-get install -y kubectl=${{ matrix.k8s-version }}-00 --allow-downgrades
          echo '::endgroup::'

          echo "::group:: install gotestsum ${GOTESTSUM_VERSION}"
          curl -L https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/gotestsum_${GOTESTSUM_VERSION}_linux_amd64.tar.gz | tar xzf - gotestsum
          chmod +x ./gotestsum
          sudo mv gotestsum /usr/local/bin
          echo "::endgroup::"

          echo ":: install podman"
          sudo apt-get -y install podman
          echo "::endgroup::"

      - name: Check out code onto GOPATH
        uses: actions/checkout@v2
        with:
          path: ./src/knative.dev/container-freezer

      - name: Install and start cri-o
        working-directory: ./
        run: |
          wget https://storage.googleapis.com/cri-o/artifacts/cri-o.amd64.v${CRIO_VERSION}.tar.gz
          tar -zxvf cri-o.amd64.v${CRIO_VERSION}.tar.gz
          cd cri-o
          sudo bash install
          sudo swapoff -a
          sudo systemctl start crio.service

      - name: Create single node cluster
        run: |
          set -x
          sudo kubeadm init --node-name=master --pod-network-cidr=192.168.0.0/16 --cri-socket=/var/run/crio/crio.sock 
          mkdir -p $HOME/.kube
          sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          kubectl taint nodes --all node-role.kubernetes.io/master-
          kubectl get pods -A

      - name: Install calico network
        run: |
          set -x
          sudo rm -rf /etc/cni/net.d/*
          kubectl create -f https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml
          kubectl create -f https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml
          sleep 10
          kubectl get pods -A

      - name: Install Knative Serving and net-kourier
        run: |
          set -o pipefail
          kubectl apply -f https://storage.googleapis.com/knative-nightly/serving/latest/serving-crds.yaml
          kubectl apply -f https://storage.googleapis.com/knative-nightly/serving/latest/serving-core.yaml
          kubectl apply -f https://storage.googleapis.com/knative-nightly/net-kourier/latest/kourier.yaml
          kubectl patch configmap/config-network \
            --namespace knative-serving \
            --type merge \
            --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}'
          kubectl get nodes

      - name: Install container-freezer
        run: |
          set -o pipefail
          ko apply -Rf config/
          kubectl get nodes
          kubectl label nodes master knative.dev/container-runtime=containerd

      - name: Wait for Ready
        run: |
          echo Waiting for Pods to become ready.
          kubectl wait pod --timeout 300s --for=condition=Ready -n knative-serving -l "app.kubernetes.io/name=knative-serving"
          # For debugging.
          kubectl get pods --all-namespaces

      - name: Setup test environment
        run: |
          podman system service -t 5000 &
          kubectl patch configmap/config-deployment -n knative-serving --type merge -p '{"data":{"concurrencyStateEndpoint":"http://$HOST_IP:9696"}}'
          ko apply -f test/test_images/sleeptalker.yaml
          sleep 30
          kubectl get pods -A
          kubectl wait ksvc --timeout 300s --for=condition=Ready -n default sleeptalker

      - name: Run e2e Tests
        run: |
          gotestsum --format testname -- \
            -race -count=1 -parallel=1 -tags=e2e \
            -timeout=30m \
            -short ./test/e2e/containerd \
            -skip-cleanup-on-fail

      - uses: chainguard-dev/actions/kind-diag@main
        # Only upload logs on failure.
        if: ${{ failure() }}
        with:
          cluster-resources: nodes,namespaces,crds,${{ matrix.cluster-resources || '' }}
          namespace-resources: pods,svc,ksvc,route,configuration,revision,king,${{ matrix.namespace-resources || '' }}
          artifact-name: logs-${{ matrix.k8s-version }}-container-freezer-containerd-e2e-test
